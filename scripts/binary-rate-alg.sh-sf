#!/bin/bash
#Parameters
impl="selftester-10G-selftest44-Sf1-Ep3-40000x100-tp" # name of the tested implementation (used for logging)
max=8000000 # maximum packet rate
N=4000000 # number of preliminary frames
M=4000000 # state table size
R=8000000 # frame rate for preliminary phase
T=500 # global timeout for preliminary phase
D=$((1000*N/R+2*T)) # delay caused by the preliminary phase
DUT_IP=172.16.28.95
# startcmd="ssh ${DUT_IP} /root/DUT-settings/set-jool 100000"
# stopcmd="ssh ${DUT_IP} /root/DUT-settings/del-jool"
dir="b" # valid values: b,f,r; b: bidirectional, f: forward (Left to Right, 6 --> 4), r: reverse (Right to Left, 6 <-- 4) 
fs=84 # IPv6 frame size; IPv4 frame size is always 20 bytes less 
xpts=60 # duration (in seconds) of an experiment instance
to=2000 # timeout in milliseconds
n=2 # foreground traffic, if ( frame_counter % n < m ) 
m=2 # E.g. n=m=2 is all foreground traffic; n=2,m=0 is all background traffic; n=10,m=9 is 90% fg and 10% bg
sleept=10 # sleeping time between the experiments
e=1000 # measurement error: the difference betwen the values of the higher and the lower bound of the binary search, when finishing
no_exp=20 # number of experiments
res_dir="results" # base directory for the results (they will be copied there at the end)

############################

# Generate log/csv file headers
echo "#############################" > ratetest.log
echo "Tested Implementation: $impl" >> ratetest.log
echo "N: $N" >> ratetest.log
echo "M: $M" >> ratetest.log
echo "R: $R" >> ratetest.log
echo "T: $T" >> ratetest.log
echo "D: $D" >> ratetest.log
echo "Frame size: $fs:" >> ratetest.log
echo "Direction $dir:" >> ratetest.log
echo "Value of n: $n" >> ratetest.log
echo "Value of m: $m" >> ratetest.log
echo "Duration (sec): $xpts" >> ratetest.log
echo "Starting rate (QPS): $((max/2))" >> ratetest.log
echo "Timeout value (sec): $to"  >> ratetest.log
echo "Measurement Error: $e"  >> ratetest.log
echo "Sleep Time (sec): $sleept" >> ratetest.log
date +'Date&Time: %Y-%m-%d %H:%M:%S.%N' >> ratetest.log
echo "#############################" >> ratetest.log
echo "No, Size, Dir, n, m, Duration, Initial Rate, N, M, R, T, D, Error, Date, Iterations needed, rate" > rate.csv

# Execute $no_exp number of experiments
for (( No=1; No <= $no_exp; No++ ))
do
	# Execute a binary search in the [l, h] interval
	l=0 #Initialize lower bound to 0
	h=$max #Initialize higher bound with maximum query rate
	for (( i=1; $((h-l)) > $e; i++ ))
	do 
		# Log some information about this step
		echo --------------------------------------------------- >> ratetest.log
		date +'%Y-%m-%d %H:%M:%S.%N Iteration no. '"${No}"'-'"$i" >> ratetest.log 
		echo ---------------------------------------------------  >> ratetest.log
		r=$(((h+l)/2)) # initialize the test rate with (h+l)/2
		echo "Testing rate: $r fps."
		echo "Testing rate: $r fps." >> ratetest.log
		FailedToFill="First trial" # Protection against 'Failed to fill state table' (test is re-executed)
                while [ -n "$FailedToFill" ]
                do
                	# echo "Starting Jool on DUT with command: $startcmd"
                	# $startcmd
			echo "Command line is: ./build/siitperf-tp $fs $r $xpts $to $n $m $N $M $R $T $D"
			echo "Command line is: ./build/siitperf-tp $fs $r $xpts $to $n $m $N $M $R $T $D" >> ratetest.log
			# Execute the test program
			./build/siitperf-tp $fs $r $xpts $to $n $m $N $M $R $T $D > temp.out 2>&1
			# Log and print out info
			cat temp.out >> ratetest.log
			cat temp.out | tail
                	# echo "Stopping Jool on DUT with command: $stopcmd"
			# $stopcmd
			FailedToFill=$(grep 'Failed to fill state table' temp.out)
			if [ -n "$FailedToFill" ]
                        then
                                echo "Test will be re-taken due to: $FailedToFill"
                                echo "Test will be re-taken due to: $FailedToFill"  >> ratetest.log
                        fi
                done
		# Check for any other errors
		error=$(grep 'Error:' temp.out)
                if [ -n "$error" ]; then
			echo "Error occurred, testing must stop."
			exit -1;
		fi
		invalid=$(grep 'invalid' temp.out)
		if [ -n "$invalid" ]; then
			echo The test is INVALID due to exceeding the allowed sending time.
			echo The test is INVALID due to exceeding the allowed sending time. >> ratetest.log
		fi
                # Collect and evaluate the results (depending on the direction of the test)
                if [ "$dir" == "b" ]; then
                        fwd_rec=$(grep 'Forward frames received:' temp.out | awk '{print $4}')
                        rev_rec=$(grep 'Reverse frames received:' temp.out | awk '{print $4}')
                        echo Forward: $fwd_rec frames were received from the required $((xpts*r)) frames
                        echo Forward: $fwd_rec frames were received from the required $((xpts*r)) frames >> ratetest.log
                        echo Reverse: $rev_rec frames were received from the required $((xpts*r)) frames
                        echo Reverse: $rev_rec frames were received from the required $((xpts*r)) frames >> ratetest.log
                        if [ $fwd_rec -eq $((xpts*r)) ] && [ $rev_rec -eq $((xpts*r)) ] && [ -z "$invalid" ]; then
                                l=$r
                                echo TEST PASSED
                                echo TEST PASSED >> ratetest.log
                        # Otherwise we choose the lower half interval
                        else
                                h=$r
                                echo TEST FAILED
                                echo TEST FAILED >> ratetest.log
                        fi
                fi
                if [ "$dir" == "f" ]; then
                        fwd_rec=$(grep 'Forward frames received:' temp.out | awk '{print $4}')
                        echo Forward: $fwd_rec frames were received from the required $((xpts*r)) frames
                        echo Forward: $fwd_rec frames were received from the required $((xpts*r)) frames >> ratetest.log
                        if [ $fwd_rec -eq $((xpts*r)) ] && [ -z "$invalid" ]; then
                                l=$r
                                echo TEST PASSED
                                echo TEST PASSED >> ratetest.log
                        # Otherwise we choose the lower half interval
                        else
                                h=$r
                                echo TEST FAILED
                                echo TEST FAILED >> ratetest.log
                        fi
                fi
                if [ "$dir" == "r" ]; then
                        rev_rec=$(grep 'Reverse frames received:' temp.out | awk '{print $4}')
                        echo Reverse: $rev_rec frames were received from the required $((xpts*r)) frames
                        echo Reverse: $rev_rec frames were received from the required $((xpts*r)) frames >> ratetest.log
                        if [ $rev_rec -eq $((xpts*r)) ] && [ -z "$invalid" ]; then
                                l=$r
                                echo TEST PASSED
                                echo TEST PASSED >> ratetest.log
                        # Otherwise we choose the lower half interval
                        else
                                h=$r
                                echo TEST FAILED
                                echo TEST FAILED >> ratetest.log
                        fi
                fi
		# Some further logging (and preparing results)
		echo "New diff: $((h-l))"
		echo "New diff: $((h-l))" >> ratetest.log
		date +'%Y-%m-%d %H:%M:%S, '"$i"', '"$r"  > temprate.csv 
		echo "Sleeping for $sleept seconds..."
		echo "Sleeping for $sleept seconds..." >> ratetest.log
		# Sleep for $sleept time to give DUT a chance to relax
		sleep $sleept 
	done # (end of the binary search)
	# Collect results
	summary=$(cat temprate.csv)
	echo "$No, $fs, $dir, $n, $m, $xpts, $(($max/2)), $N, $M, $R, $T, $D, $e, $summary" >> rate.csv
	rm temp*
done # (end of the $no_exp number of experiments)
# Save the results (may be commented out if not needed)
dirname="$res_dir/$(date +$impl'-'$fs'-'$dir'-'$n'-'$m'-'$xpts'-'$N'-'$N'-'$T'-'$R'-'$D'-'$e'-%F-%H%M')"
mkdir -p $dirname
mv ratetest.log $dirname/
mv rate.csv $dirname/
mv nohup.out $dirname/ 
cp -a siitperf.conf $dirname/
